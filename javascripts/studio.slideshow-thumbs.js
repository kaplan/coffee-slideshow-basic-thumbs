// Generated by CoffeeScript 1.6.2
/*
Slideshow Application with Thumbs
Description: Basic slideshow with thumbnail images fading with controls sans library (why? idk). Just learning so this is me winging it.

Neat stuff: There is also a Rake file you can run in the Terminal to start the watch on the scss and coffeescript. I'm not sure what the last parts are, I should find out more. The Rake comes from a great post, by Nick Quaranto: http://quaran.to/blog/2013/01/09/use-jekyll-scss-coffeescript-without-plugins/

Dependencies: Modernizr, for js detection

Version:      1.0
Created:      2013-06-05
Last Mod:     2013-06-06

Notes: This version of the slideshow is built on the original non-thumb one ( https://github.com/kaplan/coffee-slideshow-basic ). Somewhat fewer comments as a guide for myself in this version, thought being I can always go back to the original-original for reference, which I seem to do with lots of stuff. Just like the original I'm trying to do as much plain JavaScript through learning CoffeeScript as I can, later libraries.

The thumbs have a custom attribute, data-, that is pretty neat for semantic markup that you can use in your JavaScript. The ones used here are very simple, just an id for the thumb/slide that will help in setting the current image. If you look at the very bottom I have a little explaination copied from the HTML5Doctor page: http://html5doctor.com/html5-custom-data-attributes/ where I learned about these.

Working on make the JavaScript unobtrusive: I started to pull out the eventhandlers from the markup, removed the onclick="STUDIO.slideshow.pauseSlideshow()" from the toggle, next and prev. Those are now in here, where they should be for the separation between structure and behavior.

Next: I'd like to add some better or more clear documentation for the methods and properties and begin really eleminating and comments or console.logs. At this point it's very handy for me to watch the Browser's console log to see what the application is doing. In the end the comments don't compile into the JavaScript from CoffeeScript and I think that's one of my favorite things about CS. My JavaScript files were a mess with commented out logs and notes that I would leave out of fear of forgetting what I was doing, but it made for a very littered looking code, not at all crafsman like. Maybe it's the quality of my comments and the fact I try different snippets within before I settle on an approach.

Found this on Docco, which I need to start using:
http://jashkenas.github.io/docco/
http://lostechies.com/derickbailey/2011/12/14/annotated-source-code-as-documentation-with-docco/
*/

var addLoadEvent, _ref;

addLoadEvent = function(func) {
  var oldonload;

  oldonload = window.onload;
  if (typeof window.onload !== 'function') {
    return window.onload = func;
  } else {
    return window.onload = function() {
      oldonload();
      return func();
    };
  }
};

this.STUDIO = (_ref = this.STUDIO) != null ? _ref : {};

this.STUDIO.slideshow = (function() {
  var curImage, fadeInContainer, fadeInContainerTimeout, fadeInObject, fadeOutSlide, fadeOutSlideAdvance, fadeOutTimeout, loadedSlideCount, next, onImageLoad, photos, prev, reorderLayerStack, runSlideshow, setOpacity, setThumbStates, setVisibilityForAdvance, showSlideOnThumbClick, slideCount, slides, slideshow, slideshowPaused, slideshowTimeout, thumbs, thumbset, toggle, totalImageCount;

  slideshow = slides = photos = thumbset = thumbs = toggle = next = prev = "unknown";
  curImage = slideCount = totalImageCount = loadedSlideCount = 0;
  fadeInContainerTimeout = slideshowTimeout = fadeOutTimeout = null;
  slideshowPaused = false;
  onImageLoad = function(slideOrder) {
    var fadeInThumbs;

    slides[slideOrder].style.display = "block";
    loadedSlideCount++;
    if (totalImageCount === loadedSlideCount) {
      console.log("+ ================== +");
      console.log("+ ALL IMAGES LOADED! +");
      console.log("+ ================== +");
      fadeInContainerTimeout = setTimeout(function() {
        return fadeInContainer(slideshow, 0, 500);
      });
      return fadeInThumbs = setTimeout(function() {
        setThumbStates(curImage);
        return fadeInObject(thumbset, 0, 500);
      });
    }
  };
  setOpacity = function(obj, opacity) {
    obj.style.filter = "alpha(opacity:" + opacity + ")";
    obj.style.KHTMLOpacity = opacity / 100;
    obj.style.MozOpacity = opacity / 100;
    obj.style.opacity = opacity / 100;
    return obj.style.opacity = opacity / 100;
  };
  fadeInObject = function(obj, opacity) {
    var fadeInObjectTimeout;

    if (opacity <= 100) {
      setOpacity(obj, opacity);
      opacity += 2;
      return fadeInObjectTimeout = setTimeout(function() {
        return fadeInObject(obj, opacity, 200);
      });
    } else {
      return clearTimeout(fadeInObjectTimeout);
    }
  };
  fadeInContainer = function(obj, opacity) {
    var fadeInTimeout;

    if (opacity <= 100) {
      setOpacity(obj, opacity);
      opacity += 2;
      return fadeInTimeout = setTimeout(function() {
        return fadeInContainer(obj, opacity, 200);
      });
    } else {
      clearTimeout(fadeInTimeout);
      clearTimeout(fadeInContainerTimeout);
      return slideshowTimeout = setTimeout(function() {
        console.log("*** slideshow playing, first time start ***");
        runSlideshow();
        toggle.innerHTML = "Slideshow is playing, &#9785; Pause it.";
        return slideshowPaused = false;
      }, 4000);
    }
  };
  runSlideshow = function() {
    console.log("+++ runSlideshow called +++");
    console.log("curImage is " + curImage);
    console.log("next image is: " + photos[(curImage + 1) % slides.length].alt);
    toggle.innerHTML = "Slideshow is playing, &#9785; Pause it.";
    slides[(curImage + 1) % slides.length].style.visibility = 'visible';
    setOpacity(slides[(curImage + 1) % slides.length], 100);
    setThumbStates((curImage + 1) % slides.length);
    console.log("slideshowTimeout ID: " + slideshowTimeout);
    clearTimeout(slideshowTimeout);
    console.log("slideshowTimeout ID: " + slideshowTimeout);
    return fadeOutSlide(slides[curImage % slides.length], 100);
  };
  fadeOutSlide = function(obj, opacity) {
    if (opacity >= 0) {
      setOpacity(obj, opacity);
      opacity -= 2;
      return fadeOutTimeout = setTimeout(function() {
        return fadeOutSlide(obj, opacity, 200);
      });
    } else {
      console.log("+++ fadeOutSlide complete +++");
      clearTimeout(fadeOutTimeout);
      slides[curImage % slides.length].style.visibility = 'hidden';
      reorderLayerStack();
      curImage++;
      if (curImage % slides.length === 0) {
        curImage = 0;
      }
      if (!slideshowPaused) {
        return slideshowTimeout = setTimeout(runSlideshow, 3500);
      }
    }
  };
  fadeOutSlideAdvance = function(obj, opacity) {
    var shuffle, slide, _i, _len;

    if (opacity >= 0) {
      setOpacity(obj, opacity);
      opacity -= 10;
      return fadeOutTimeout = setTimeout(function() {
        return fadeOutSlideAdvance(obj, opacity, 10);
      });
    } else {
      console.log("+++ fadeOutSlideAdvance complete for advancing slide +++");
      obj.style.visibility = 'hidden';
      if (!slideshowPaused) {
        slideshowTimeout = setTimeout(runSlideshow, 3500);
      }
      shuffle = function() {
        return slides[_i].style.zIndex = ((slides.length - _i) + (curImage - 1)) % slides.length;
      };
      for (_i = 0, _len = slides.length; _i < _len; _i++) {
        slide = slides[_i];
        shuffle(slide);
      }
      return true;
    }
  };
  setVisibilityForAdvance = function(direction) {
    console.log("+++ setVisibilityForAdvance called: slide advance direction " + direction.name + " +++");
    switch (direction) {
      case next:
        slides[(curImage + 1) % slides.length].style.visibility = 'visible';
        return setThumbStates((curImage + 1) % slides.length);
      case prev:
        slides[(curImage - 1) % slides.length].style.visibility = 'visible';
        return setThumbStates((curImage - 1) % slides.length);
      default:
        break;
    }
  };
  showSlideOnThumbClick = function(thumbId) {
    console.log("+++ thumb " + thumbId + " clicked +++");
    console.log("curImage is " + curImage);
    setThumbStates(thumbId);
    slides[thumbId].style.visibility = 'visible';
    setOpacity(slides[thumbId], 100);
    fadeOutSlideAdvance(slides[curImage % slides.length], 100);
    curImage = parseInt(thumbId, 10);
    return clearTimeout(slideshowTimeout);
  };
  setThumbStates = function(thumbId) {
    var thumb, _i, _len;

    console.log("*** change state thumb " + thumbId + " clicked ***");
    for (_i = 0, _len = thumbs.length; _i < _len; _i++) {
      thumb = thumbs[_i];
      setOpacity(thumbs[_i], 50);
    }
    return setOpacity(thumbs[thumbId], 100);
  };
  reorderLayerStack = function() {
    var shuffle, slide, _i, _len;

    shuffle = function() {
      return slides[_i].style.zIndex = ((slides.length - _i) + curImage) % slides.length;
    };
    for (_i = 0, _len = slides.length; _i < _len; _i++) {
      slide = slides[_i];
      shuffle(slide);
    }
    return true;
  };
  return {
    initSlides: function(slideWrapper) {
      var fadeInTimeout, i, link, slide, _i, _len;

      console.log("+++ initSlides called +++");
      curImage = 0;
      loadedSlideCount = 0;
      slideshow = document.getElementById(slideWrapper);
      slides = slideshow.getElementsByTagName("div");
      photos = slideshow.getElementsByTagName("img");
      thumbset = document.getElementById("thumb-wrapper");
      thumbs = thumbset.getElementsByTagName("img");
      totalImageCount = photos.length;
      next = document.getElementById("next");
      next.innerHTML = "next &#10095;";
      next.name = "NEXT";
      next.onclick = function() {
        return STUDIO.slideshow.nextSlide();
      };
      prev = document.getElementById("previous");
      prev.innerHTML = "&#10094; prev";
      prev.name = "PREV";
      prev.onclick = function() {
        return STUDIO.slideshow.prevSlide();
      };
      toggle = document.getElementById("toggle");
      toggle.onclick = function() {
        return STUDIO.slideshow.pauseSlideshow();
      };
      setOpacity(slideshow, 50);
      for (_i = 0, _len = slides.length; _i < _len; _i++) {
        slide = slides[_i];
        slide.style.zIndex = (slides.length - 1) - _i;
        setOpacity(slide, 20);
        slide.style.visibility = 'hidden';
        link = thumbs[_i].parentNode;
        link.onclick = function() {
          console.log("" + this);
          this.slideId = parseInt(this.dataset.slideshowId, 10);
          console.log(this.slideId);
          if (curImage !== this.slideId) {
            showSlideOnThumbClick(this.slideId);
          }
          return false;
        };
      }
      setOpacity(slides[0], 100);
      slides[0].style.visibility = 'visible';
      if (totalImageCount === loadedSlideCount) {
        console.log("+ ================== +");
        console.log("+ IMAGES WERE CACHED +");
        console.log("+ ================== +");
        fadeInTimeout = setTimeout(function() {
          return fadeInContainer(obj, opacity, 20);
        });
      } else {
        i = 0;
        while (i < totalImageCount) {
          photos[i].onLoad = onImageLoad(i);
          i += 1;
        }
      }
      return true;
    },
    pauseSlideshow: function() {
      if (!slideshowPaused) {
        console.log("slideshow paused");
        clearTimeout(slideshowTimeout);
        slideshowPaused = true;
        return toggle.innerHTML = "Slideshow is paused, &#9787; Play it.";
      } else {
        console.log("slideshow playing");
        runSlideshow();
        slideshowPaused = false;
        return toggle.innerHTML = "Slideshow is playing, &#9785; Pause it.";
      }
    },
    nextSlide: function() {
      console.log("+++ next slide button clicked +++");
      console.log("curImage is " + curImage);
      clearTimeout(slideshowTimeout);
      setVisibilityForAdvance(next);
      clearTimeout(fadeOutTimeout);
      setOpacity(slides[(curImage + 1) % slides.length], 100);
      fadeOutSlideAdvance(slides[curImage % slides.length], 100);
      curImage++;
      if (curImage % slides.length === 0) {
        return curImage = 0;
      }
    },
    prevSlide: function() {
      console.log("+++ prev slide button clicked +++");
      console.log("curImage is " + curImage);
      clearTimeout(slideshowTimeout);
      clearTimeout(fadeOutTimeout);
      if (curImage % slides.length === 0) {
        curImage = slides.length;
      }
      setVisibilityForAdvance(prev);
      setOpacity(slides[(curImage - 1) % slides.length], 100);
      fadeOutSlideAdvance(slides[curImage % slides.length], 100);
      return curImage--;
    },
    getCurImage: function() {
      return curImage;
    },
    getSlideId: function(id) {
      var thumbId;

      thumbId = thumbs[id].parentNode.dataset.slideshowId;
      return thumbId;
    }
  };
})();
